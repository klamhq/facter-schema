// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: klamhq/rpc/facter/v1/service.proto

package facterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * IP version enum.
type IPVersion int32

const (
	IPVersion_IP_VERSION_V0_UNSPECIFIED IPVersion = 0 //* Unknown IP version.
	IPVersion_IP_VERSION_V4             IPVersion = 1 //* IPv4.
	IPVersion_IP_VERSION_V6             IPVersion = 2 //* IPv6.
)

// Enum value maps for IPVersion.
var (
	IPVersion_name = map[int32]string{
		0: "IP_VERSION_V0_UNSPECIFIED",
		1: "IP_VERSION_V4",
		2: "IP_VERSION_V6",
	}
	IPVersion_value = map[string]int32{
		"IP_VERSION_V0_UNSPECIFIED": 0,
		"IP_VERSION_V4":             1,
		"IP_VERSION_V6":             2,
	}
)

func (x IPVersion) Enum() *IPVersion {
	p := new(IPVersion)
	*p = x
	return p
}

func (x IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_klamhq_rpc_facter_v1_service_proto_enumTypes[0].Descriptor()
}

func (IPVersion) Type() protoreflect.EnumType {
	return &file_klamhq_rpc_facter_v1_service_proto_enumTypes[0]
}

func (x IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPVersion.Descriptor instead.
func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{0}
}

// * Connection state enum.
type State int32

const (
	State_STATE_UNKNOWN_UNSPECIFIED State = 0 //* Unknown state.
	State_STATE_ESTABLISHED         State = 1 //* Established connection.
	State_STATE_LISTENING           State = 2 //* Listening state.
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNKNOWN_UNSPECIFIED",
		1: "STATE_ESTABLISHED",
		2: "STATE_LISTENING",
	}
	State_value = map[string]int32{
		"STATE_UNKNOWN_UNSPECIFIED": 0,
		"STATE_ESTABLISHED":         1,
		"STATE_LISTENING":           2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_klamhq_rpc_facter_v1_service_proto_enumTypes[1].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_klamhq_rpc_facter_v1_service_proto_enumTypes[1]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{1}
}

// * Connection protocol enum.
type Protocol int32

const (
	Protocol_PROTOCOL_UDP_UNSPECIFIED Protocol = 0 //* UDP protocol.
	Protocol_PROTOCOL_TCP             Protocol = 1 //* TCP protocol.
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "PROTOCOL_UDP_UNSPECIFIED",
		1: "PROTOCOL_TCP",
	}
	Protocol_value = map[string]int32{
		"PROTOCOL_UDP_UNSPECIFIED": 0,
		"PROTOCOL_TCP":             1,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_klamhq_rpc_facter_v1_service_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_klamhq_rpc_facter_v1_service_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{2}
}

// *
// Represents the inventory of a host.
type HostInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname       string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`                                    //* Hostname of the host.
	Packages       []*Package        `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`                                    //* List of installed packages.
	Network        *Network          `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`                                      //* Network information.
	Platform       *Platform         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`                                    //* Platform details.
	Users          []*User           `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`                                          //* List of users.
	Metadata       *Metadata         `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`                                    //* Additional metadata.
	Identifier     *Identifier       `protobuf:"bytes,7,opt,name=identifier,proto3" json:"identifier,omitempty"`                                //* Unique identifier of the host.
	SshKeyInfo     []*SshKeyInfo     `protobuf:"bytes,8,rep,name=ssh_key_info,json=sshKeyInfo,proto3" json:"ssh_key_info,omitempty"`            //* SSH key information.
	Application    []*Application    `protobuf:"bytes,9,rep,name=application,proto3" json:"application,omitempty"`                              //* Application information.
	SshKeyAccess   []*SshKeyAccess   `protobuf:"bytes,10,rep,name=ssh_key_access,json=sshKeyAccess,proto3" json:"ssh_key_access,omitempty"`     //* SSH key access details.
	SystemdService []*SystemdService `protobuf:"bytes,11,rep,name=systemd_service,json=systemdService,proto3" json:"systemd_service,omitempty"` //* Systemd service information.
	KnownHost      []*KnownHost      `protobuf:"bytes,12,rep,name=known_host,json=knownHost,proto3" json:"known_host,omitempty"`                //* Known hosts information.
	Processes      []*Process        `protobuf:"bytes,13,rep,name=processes,proto3" json:"processes,omitempty"`                                 //* List of processes running on the host.
	CreatedAt      string            `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                //* Creation date of the inventory.
}

func (x *HostInventory) Reset() {
	*x = HostInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInventory) ProtoMessage() {}

func (x *HostInventory) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInventory.ProtoReflect.Descriptor instead.
func (*HostInventory) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *HostInventory) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInventory) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *HostInventory) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *HostInventory) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *HostInventory) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *HostInventory) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HostInventory) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *HostInventory) GetSshKeyInfo() []*SshKeyInfo {
	if x != nil {
		return x.SshKeyInfo
	}
	return nil
}

func (x *HostInventory) GetApplication() []*Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *HostInventory) GetSshKeyAccess() []*SshKeyAccess {
	if x != nil {
		return x.SshKeyAccess
	}
	return nil
}

func (x *HostInventory) GetSystemdService() []*SystemdService {
	if x != nil {
		return x.SystemdService
	}
	return nil
}

func (x *HostInventory) GetKnownHost() []*KnownHost {
	if x != nil {
		return x.KnownHost
	}
	return nil
}

func (x *HostInventory) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *HostInventory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type HostDeltaInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname               string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	PackagesAdded          []*Package        `protobuf:"bytes,2,rep,name=packages_added,json=packagesAdded,proto3" json:"packages_added,omitempty"`                            //* Packages added.
	PackagesRemoved        []*Package        `protobuf:"bytes,3,rep,name=packages_removed,json=packagesRemoved,proto3" json:"packages_removed,omitempty"`                      //* Packages removed.
	UsersAdded             []*User           `protobuf:"bytes,4,rep,name=users_added,json=usersAdded,proto3" json:"users_added,omitempty"`                                     //* Users added.
	UsersRemoved           []*User           `protobuf:"bytes,5,rep,name=users_removed,json=usersRemoved,proto3" json:"users_removed,omitempty"`                               //* Users removed.
	ApplicationsAdded      []*Application    `protobuf:"bytes,6,rep,name=applications_added,json=applicationsAdded,proto3" json:"applications_added,omitempty"`                //* Applications added.
	ApplicationsRemoved    []*Application    `protobuf:"bytes,7,rep,name=applications_removed,json=applicationsRemoved,proto3" json:"applications_removed,omitempty"`          //* Applications removed.
	SystemdservicesAdded   []*SystemdService `protobuf:"bytes,8,rep,name=systemdservices_added,json=systemdservicesAdded,proto3" json:"systemdservices_added,omitempty"`       //* Systemd services added.
	SystemdservicesRemoved []*SystemdService `protobuf:"bytes,9,rep,name=systemdservices_removed,json=systemdservicesRemoved,proto3" json:"systemdservices_removed,omitempty"` //* Systemd services removed.
	KnownhostsAdded        []*KnownHost      `protobuf:"bytes,10,rep,name=knownhosts_added,json=knownhostsAdded,proto3" json:"knownhosts_added,omitempty"`                     //* Known hosts added.
	KnownhostsRemoved      []*KnownHost      `protobuf:"bytes,11,rep,name=knownhosts_removed,json=knownhostsRemoved,proto3" json:"knownhosts_removed,omitempty"`               //* Known hosts removed.
	SshkeyaccessAdded      []*SshKeyAccess   `protobuf:"bytes,12,rep,name=sshkeyaccess_added,json=sshkeyaccessAdded,proto3" json:"sshkeyaccess_added,omitempty"`               //* SSH key access added.
	SshkeyaccessRemoved    []*SshKeyAccess   `protobuf:"bytes,13,rep,name=sshkeyaccess_removed,json=sshkeyaccessRemoved,proto3" json:"sshkeyaccess_removed,omitempty"`         //* SSH key access removed.
	UpdatedAt              string            `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                       //* Last update date of the delta inventory.
	SshkeyinfoAdded        []*SshKeyInfo     `protobuf:"bytes,15,rep,name=sshkeyinfo_added,json=sshkeyinfoAdded,proto3" json:"sshkeyinfo_added,omitempty"`                     //* SSH key info added.
	SshkeyinfoRemoved      []*SshKeyInfo     `protobuf:"bytes,16,rep,name=sshkeyinfo_removed,json=sshkeyinfoRemoved,proto3" json:"sshkeyinfo_removed,omitempty"`               //* SSH key info removed.
	Platform               *Platform         `protobuf:"bytes,17,opt,name=platform,proto3" json:"platform,omitempty"`                                                          //* Platform details.
	Network                *Network          `protobuf:"bytes,18,opt,name=network,proto3" json:"network,omitempty"`                                                            //* Network information.
	ProcessesAdded         []*Process        `protobuf:"bytes,19,rep,name=processes_added,json=processesAdded,proto3" json:"processes_added,omitempty"`                        //* List of processes running on the host.
	ProcessesRemoved       []*Process        `protobuf:"bytes,20,rep,name=processes_removed,json=processesRemoved,proto3" json:"processes_removed,omitempty"`                  //* List of processes removed from the host.
}

func (x *HostDeltaInventory) Reset() {
	*x = HostDeltaInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDeltaInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDeltaInventory) ProtoMessage() {}

func (x *HostDeltaInventory) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDeltaInventory.ProtoReflect.Descriptor instead.
func (*HostDeltaInventory) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *HostDeltaInventory) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostDeltaInventory) GetPackagesAdded() []*Package {
	if x != nil {
		return x.PackagesAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetPackagesRemoved() []*Package {
	if x != nil {
		return x.PackagesRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetUsersAdded() []*User {
	if x != nil {
		return x.UsersAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetUsersRemoved() []*User {
	if x != nil {
		return x.UsersRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetApplicationsAdded() []*Application {
	if x != nil {
		return x.ApplicationsAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetApplicationsRemoved() []*Application {
	if x != nil {
		return x.ApplicationsRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetSystemdservicesAdded() []*SystemdService {
	if x != nil {
		return x.SystemdservicesAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetSystemdservicesRemoved() []*SystemdService {
	if x != nil {
		return x.SystemdservicesRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetKnownhostsAdded() []*KnownHost {
	if x != nil {
		return x.KnownhostsAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetKnownhostsRemoved() []*KnownHost {
	if x != nil {
		return x.KnownhostsRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetSshkeyaccessAdded() []*SshKeyAccess {
	if x != nil {
		return x.SshkeyaccessAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetSshkeyaccessRemoved() []*SshKeyAccess {
	if x != nil {
		return x.SshkeyaccessRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *HostDeltaInventory) GetSshkeyinfoAdded() []*SshKeyInfo {
	if x != nil {
		return x.SshkeyinfoAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetSshkeyinfoRemoved() []*SshKeyInfo {
	if x != nil {
		return x.SshkeyinfoRemoved
	}
	return nil
}

func (x *HostDeltaInventory) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *HostDeltaInventory) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *HostDeltaInventory) GetProcessesAdded() []*Process {
	if x != nil {
		return x.ProcessesAdded
	}
	return nil
}

func (x *HostDeltaInventory) GetProcessesRemoved() []*Process {
	if x != nil {
		return x.ProcessesRemoved
	}
	return nil
}

// *
// Represents the inventory of a host, which can be either full or delta.
type InventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*InventoryRequest_Full
	//	*InventoryRequest_Delta
	Content isInventoryRequest_Content `protobuf_oneof:"content"`
}

func (x *InventoryRequest) Reset() {
	*x = InventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRequest) ProtoMessage() {}

func (x *InventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRequest.ProtoReflect.Descriptor instead.
func (*InventoryRequest) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{2}
}

func (m *InventoryRequest) GetContent() isInventoryRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *InventoryRequest) GetFull() *HostInventory {
	if x, ok := x.GetContent().(*InventoryRequest_Full); ok {
		return x.Full
	}
	return nil
}

func (x *InventoryRequest) GetDelta() *HostDeltaInventory {
	if x, ok := x.GetContent().(*InventoryRequest_Delta); ok {
		return x.Delta
	}
	return nil
}

type isInventoryRequest_Content interface {
	isInventoryRequest_Content()
}

type InventoryRequest_Full struct {
	Full *HostInventory `protobuf:"bytes,1,opt,name=full,proto3,oneof"` //* Full inventory of the host.
}

type InventoryRequest_Delta struct {
	Delta *HostDeltaInventory `protobuf:"bytes,2,opt,name=delta,proto3,oneof"` //* Delta inventory of the host.
}

func (*InventoryRequest_Full) isInventoryRequest_Content() {}

func (*InventoryRequest_Delta) isInventoryRequest_Content() {}

// * Identifier for a machine.
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId string `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"` //* Unique machine identifier.
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                            //* Universally unique identifier (UUID).
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *Identifier) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *Identifier) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// * Additional metadata information.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningUser   string `protobuf:"bytes,1,opt,name=running_user,json=runningUser,proto3" json:"running_user,omitempty"`       //* User who ran the process.
	RunningDate   string `protobuf:"bytes,2,opt,name=running_date,json=runningDate,proto3" json:"running_date,omitempty"`       //* Date of execution.
	FacterVersion string `protobuf:"bytes,3,opt,name=facter_version,json=facterVersion,proto3" json:"facter_version,omitempty"` //* Facter version used.
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetRunningUser() string {
	if x != nil {
		return x.RunningUser
	}
	return ""
}

func (x *Metadata) GetRunningDate() string {
	if x != nil {
		return x.RunningDate
	}
	return ""
}

func (x *Metadata) GetFacterVersion() string {
	if x != nil {
		return x.FacterVersion
	}
	return ""
}

// * Systemd service information.
type SystemdService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                         //* Service name.
	Description  string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                           //* Service description.
	Loaded       string   `protobuf:"bytes,3,opt,name=loaded,proto3" json:"loaded,omitempty"`                                     //* Loaded state.
	Active       string   `protobuf:"bytes,4,opt,name=active,proto3" json:"active,omitempty"`                                     //* Active state.
	SubState     string   `protobuf:"bytes,5,opt,name=sub_state,json=subState,proto3" json:"sub_state,omitempty"`                 //* Sub-state.
	Enabled      bool     `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`                                  //* Whether the service is enabled.
	Pid          int64    `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`                                          //* Process ID.
	Tasks        int64    `protobuf:"varint,8,opt,name=tasks,proto3" json:"tasks,omitempty"`                                      //* Number of tasks.
	MemoryBytes  int64    `protobuf:"varint,9,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`       //* Memory usage in bytes.
	CpuUsageNsec int64    `protobuf:"varint,10,opt,name=cpu_usage_nsec,json=cpuUsageNsec,proto3" json:"cpu_usage_nsec,omitempty"` //* CPU usage in nanoseconds.
	Cgroup       string   `protobuf:"bytes,11,opt,name=cgroup,proto3" json:"cgroup,omitempty"`                                    //* Control group.
	Requires     []string `protobuf:"bytes,12,rep,name=requires,proto3" json:"requires,omitempty"`                                //* Required services.
	Wants        []string `protobuf:"bytes,13,rep,name=wants,proto3" json:"wants,omitempty"`                                      //* Wanted services.
	After        []string `protobuf:"bytes,14,rep,name=after,proto3" json:"after,omitempty"`                                      //* Services started after this one.
	Before       []string `protobuf:"bytes,15,rep,name=before,proto3" json:"before,omitempty"`                                    //* Services started before this one.
	UpdatedAt    string   `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`             //* Last update date of the service information.
}

func (x *SystemdService) Reset() {
	*x = SystemdService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemdService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemdService) ProtoMessage() {}

func (x *SystemdService) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemdService.ProtoReflect.Descriptor instead.
func (*SystemdService) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *SystemdService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemdService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SystemdService) GetLoaded() string {
	if x != nil {
		return x.Loaded
	}
	return ""
}

func (x *SystemdService) GetActive() string {
	if x != nil {
		return x.Active
	}
	return ""
}

func (x *SystemdService) GetSubState() string {
	if x != nil {
		return x.SubState
	}
	return ""
}

func (x *SystemdService) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SystemdService) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SystemdService) GetTasks() int64 {
	if x != nil {
		return x.Tasks
	}
	return 0
}

func (x *SystemdService) GetMemoryBytes() int64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *SystemdService) GetCpuUsageNsec() int64 {
	if x != nil {
		return x.CpuUsageNsec
	}
	return 0
}

func (x *SystemdService) GetCgroup() string {
	if x != nil {
		return x.Cgroup
	}
	return ""
}

func (x *SystemdService) GetRequires() []string {
	if x != nil {
		return x.Requires
	}
	return nil
}

func (x *SystemdService) GetWants() []string {
	if x != nil {
		return x.Wants
	}
	return nil
}

func (x *SystemdService) GetAfter() []string {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *SystemdService) GetBefore() []string {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *SystemdService) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// * Platform information.
type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitSystem     string          `protobuf:"bytes,1,opt,name=init_system,json=initSystem,proto3" json:"init_system,omitempty"` //* Init system used.
	Kernel         *Kernel         `protobuf:"bytes,2,opt,name=kernel,proto3" json:"kernel,omitempty"`                           //* Kernel information.
	Os             *Os             `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`                                   //* Operating system details.
	Virtualization *Virtualization `protobuf:"bytes,4,opt,name=virtualization,proto3" json:"virtualization,omitempty"`           //* Virtualization details.
	Hardware       *Hardware       `protobuf:"bytes,5,opt,name=hardware,proto3" json:"hardware,omitempty"`                       //* Hardware information.
	Identifier     *Identifier     `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`                   //* Host identifier.
	Uptime         uint64          `protobuf:"varint,7,opt,name=uptime,proto3" json:"uptime,omitempty"`                          //* Uptime of the host in seconds.
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *Platform) GetInitSystem() string {
	if x != nil {
		return x.InitSystem
	}
	return ""
}

func (x *Platform) GetKernel() *Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *Platform) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *Platform) GetVirtualization() *Virtualization {
	if x != nil {
		return x.Virtualization
	}
	return nil
}

func (x *Platform) GetHardware() *Hardware {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *Platform) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Platform) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kernel string `protobuf:"bytes,1,opt,name=kernel,proto3" json:"kernel,omitempty"` //* Kernel name/version.
}

func (x *Kernel) Reset() {
	*x = Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel) ProtoMessage() {}

func (x *Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel.ProtoReflect.Descriptor instead.
func (*Kernel) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *Kernel) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

type Os struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       //* OS name.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` //* OS version.
	Family  string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`   //* OS family.
}

func (x *Os) Reset() {
	*x = Os{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Os) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Os) ProtoMessage() {}

func (x *Os) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Os.ProtoReflect.Descriptor instead.
func (*Os) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *Os) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Os) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Os) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

// * Virtualization details.
type Virtualization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"` //* Virtualization system.
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`     //* Virtualization role (host/guest).
}

func (x *Virtualization) Reset() {
	*x = Virtualization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Virtualization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Virtualization) ProtoMessage() {}

func (x *Virtualization) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Virtualization.ProtoReflect.Descriptor instead.
func (*Virtualization) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *Virtualization) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Virtualization) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// * User information.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                                   //* Username.
	Uid           string     `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                             //* User ID.
	Gid           string     `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                                             //* Group ID.
	Home          string     `protobuf:"bytes,4,opt,name=home,proto3" json:"home,omitempty"`                                           //* Home directory.
	Sessions      []*Session `protobuf:"bytes,5,rep,name=sessions,proto3" json:"sessions,omitempty"`                                   //* List of sessions.
	Shell         string     `protobuf:"bytes,6,opt,name=shell,proto3" json:"shell,omitempty"`                                         //* User shell.
	CanBecomeRoot bool       `protobuf:"varint,7,opt,name=can_become_root,json=canBecomeRoot,proto3" json:"can_become_root,omitempty"` //* Whether the user can become root.
	UpdatedAt     string     `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                //* Last update date of the user information.
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *User) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *User) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *User) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *User) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

func (x *User) GetCanBecomeRoot() bool {
	if x != nil {
		return x.CanBecomeRoot
	}
	return false
}

func (x *User) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected bool   `protobuf:"varint,1,opt,name=connected,proto3" json:"connected,omitempty"` //* Whether the session is active.
	Terminal  string `protobuf:"bytes,2,opt,name=terminal,proto3" json:"terminal,omitempty"`    //* Terminal name.
	Started   int64  `protobuf:"varint,3,opt,name=started,proto3" json:"started,omitempty"`     //* Start time of the session.
	Host      string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`            //* Remote host name.
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *Session) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *Session) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *Session) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *Session) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// *
// Network information.
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces  []*Interface       `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`                   //* Network interfaces.
	Ip          *Ip                `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                                   //* Local IP address.
	ExternalIp  *ExternalIp        `protobuf:"bytes,3,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"` //* External IP information.
	Connections []*ConnectionState `protobuf:"bytes,4,rep,name=connections,proto3" json:"connections,omitempty"`                 //* Network connections.
	Proxy       *Proxy             `protobuf:"bytes,5,opt,name=proxy,proto3" json:"proxy,omitempty"`                             //* Proxy settings.
	Firewall    *Firewall          `protobuf:"bytes,6,opt,name=firewall,proto3" json:"firewall,omitempty"`                       //* Firewall information.
	DnsInfo     *DnsInfo           `protobuf:"bytes,7,opt,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`          //* DNS information.
	GeoipInfo   *GeoIpInfo         `protobuf:"bytes,8,opt,name=geoip_info,json=geoipInfo,proto3" json:"geoip_info,omitempty"`    //* Geolocation information.
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *Network) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Network) GetIp() *Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Network) GetExternalIp() *ExternalIp {
	if x != nil {
		return x.ExternalIp
	}
	return nil
}

func (x *Network) GetConnections() []*ConnectionState {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *Network) GetProxy() *Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *Network) GetFirewall() *Firewall {
	if x != nil {
		return x.Firewall
	}
	return nil
}

func (x *Network) GetDnsInfo() *DnsInfo {
	if x != nil {
		return x.DnsInfo
	}
	return nil
}

func (x *Network) GetGeoipInfo() *GeoIpInfo {
	if x != nil {
		return x.GeoipInfo
	}
	return nil
}

// * IP address details.
type Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`       //* IP address.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` //* IP version (v4/v6).
	Cidr    string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`       //* CIDR notation.
}

func (x *Ip) Reset() {
	*x = Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ip) ProtoMessage() {}

func (x *Ip) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ip.ProtoReflect.Descriptor instead.
func (*Ip) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *Ip) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Ip) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Ip) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

// * External IP information.
type ExternalIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`               //* External IP address.
	Forwarded string `protobuf:"bytes,2,opt,name=forwarded,proto3" json:"forwarded,omitempty"` //* Forwarded IP address, if any.
}

func (x *ExternalIp) Reset() {
	*x = ExternalIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIp) ProtoMessage() {}

func (x *ExternalIp) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIp.ProtoReflect.Descriptor instead.
func (*ExternalIp) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ExternalIp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ExternalIp) GetForwarded() string {
	if x != nil {
		return x.Forwarded
	}
	return ""
}

// * Geolocation information.
type GeoIpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"` //* Longitude.
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   //* Latitude.
	Accuracy  int32   `protobuf:"varint,3,opt,name=accuracy,proto3" json:"accuracy,omitempty"`    //* Accuracy of the geolocation.
}

func (x *GeoIpInfo) Reset() {
	*x = GeoIpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpInfo) ProtoMessage() {}

func (x *GeoIpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpInfo.ProtoReflect.Descriptor instead.
func (*GeoIpInfo) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *GeoIpInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoIpInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoIpInfo) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

// * Network interface.
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     //* Interface name.
	Ips          []*Ip  `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`                                       //* List of IP addresses.
	HardwareAddr string `protobuf:"bytes,3,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` //* Hardware (MAC) address.
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetIps() []*Ip {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *Interface) GetHardwareAddr() string {
	if x != nil {
		return x.HardwareAddr
	}
	return ""
}

// * Proxy settings.
type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip *Ip `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"` //* Proxy IP.
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *Proxy) GetIp() *Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

// * DNS information.
type DnsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nameservers   string `protobuf:"bytes,1,opt,name=nameservers,proto3" json:"nameservers,omitempty"`                          //* DNS nameservers.
	SearchDomains string `protobuf:"bytes,2,opt,name=search_domains,json=searchDomains,proto3" json:"search_domains,omitempty"` //* DNS search domains.
	Port          string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`                                        //* DNS port.
}

func (x *DnsInfo) Reset() {
	*x = DnsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsInfo) ProtoMessage() {}

func (x *DnsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsInfo.ProtoReflect.Descriptor instead.
func (*DnsInfo) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *DnsInfo) GetNameservers() string {
	if x != nil {
		return x.Nameservers
	}
	return ""
}

func (x *DnsInfo) GetSearchDomains() string {
	if x != nil {
		return x.SearchDomains
	}
	return ""
}

func (x *DnsInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

// * Connection state.
type ConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=klamhq.rpc.facter.v1.Protocol" json:"protocol,omitempty"` //* Connection protocol.
	State    State    `protobuf:"varint,2,opt,name=state,proto3,enum=klamhq.rpc.facter.v1.State" json:"state,omitempty"`          //* Connection state.
	Process  *Process `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`                                       //* Process associated with the connection.
	Local    *IpPort  `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`                                           //* Local IP and port.
	Remote   *IpPort  `protobuf:"bytes,5,opt,name=remote,proto3" json:"remote,omitempty"`                                         //* Remote IP and port.
}

func (x *ConnectionState) Reset() {
	*x = ConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState) ProtoMessage() {}

func (x *ConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState.ProtoReflect.Descriptor instead.
func (*ConnectionState) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *ConnectionState) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_PROTOCOL_UDP_UNSPECIFIED
}

func (x *ConnectionState) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNKNOWN_UNSPECIFIED
}

func (x *ConnectionState) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ConnectionState) GetLocal() *IpPort {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *ConnectionState) GetRemote() *IpPort {
	if x != nil {
		return x.Remote
	}
	return nil
}

// * Process information.
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid           int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`                                            //* Process ID.
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           //* Process name.
	Package       *Package `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`                                     //* Associated package.
	Username      string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                   //* User running the process.
	Cmdline       string   `protobuf:"bytes,5,opt,name=cmdline,proto3" json:"cmdline,omitempty"`                                     //* Command line used to start the process.
	Terminal      string   `protobuf:"bytes,6,opt,name=terminal,proto3" json:"terminal,omitempty"`                                   //* Terminal associated with the process.
	Exe           string   `protobuf:"bytes,7,opt,name=exe,proto3" json:"exe,omitempty"`                                             //* Executable path.
	CreateTime    int64    `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`            //* Process creation time.
	Parent        int64    `protobuf:"varint,9,opt,name=parent,proto3" json:"parent,omitempty"`                                      //* Parent process ID.
	Status        string   `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                                      //* Process status.
	CpuPercent    float64  `protobuf:"fixed64,11,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`          //* CPU time usage percentage.
	MemoryPercent float64  `protobuf:"fixed64,12,opt,name=memory_percent,json=memoryPercent,proto3" json:"memory_percent,omitempty"` //* Memory usage percentage.
	UpdatedAt     string   `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`               //* Last update date of the process information.
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *Process) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Process) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Process) GetCmdline() string {
	if x != nil {
		return x.Cmdline
	}
	return ""
}

func (x *Process) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *Process) GetExe() string {
	if x != nil {
		return x.Exe
	}
	return ""
}

func (x *Process) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Process) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *Process) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Process) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *Process) GetMemoryPercent() float64 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *Process) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// * Association of IP and port.
type IpPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *Ip    `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`      //* IP address.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"` //* Port number.
}

func (x *IpPort) Reset() {
	*x = IpPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPort) ProtoMessage() {}

func (x *IpPort) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPort.ProtoReflect.Descriptor instead.
func (*IpPort) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *IpPort) GetIp() *Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IpPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// *
// Package details.
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    //* Package name.
	Version           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                              //* Package version.
	Architecture      string `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`                                    //* Package architecture.
	Description       string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                      //* Package description.
	UpgradableVersion string `protobuf:"bytes,5,opt,name=upgradable_version,json=upgradableVersion,proto3" json:"upgradable_version,omitempty"` //* Version to which the package can be upgraded.
	IsUpToDate        bool   `protobuf:"varint,6,opt,name=is_up_to_date,json=isUpToDate,proto3" json:"is_up_to_date,omitempty"`                 //* Whether the package is up to date.
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Package) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Package) GetUpgradableVersion() string {
	if x != nil {
		return x.UpgradableVersion
	}
	return ""
}

func (x *Package) GetIsUpToDate() bool {
	if x != nil {
		return x.IsUpToDate
	}
	return false
}

// *
// SSH key information.
type SshKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint        string           `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`                                            //* SSH key fingerprint.
	Type               string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                          //* Type of SSH key.
	Length             int64            `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                                                     //* Key length.
	Comment            string           `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`                                                    //* Key comment.
	Path               string           `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                                                          //* Path to the key.
	Name               string           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                          //* Name of the key.
	Options            []*SshKeyOptions `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`                                                    //* SSH key options.
	FromAuthorizedKeys bool             `protobuf:"varint,8,opt,name=from_authorized_keys,json=fromAuthorizedKeys,proto3" json:"from_authorized_keys,omitempty"` //* Whether from authorized_keys.
	Owner              string           `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`                                                        //* Key owner.
	UpdatedAt          string           `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                              //* Last update date of the SSH key information.
}

func (x *SshKeyInfo) Reset() {
	*x = SshKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshKeyInfo) ProtoMessage() {}

func (x *SshKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshKeyInfo.ProtoReflect.Descriptor instead.
func (*SshKeyInfo) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *SshKeyInfo) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *SshKeyInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SshKeyInfo) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SshKeyInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SshKeyInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SshKeyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SshKeyInfo) GetOptions() []*SshKeyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SshKeyInfo) GetFromAuthorizedKeys() bool {
	if x != nil {
		return x.FromAuthorizedKeys
	}
	return false
}

func (x *SshKeyInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SshKeyInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// * SSH key options.
type SshKeyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options string `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` //* Option string.
}

func (x *SshKeyOptions) Reset() {
	*x = SshKeyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshKeyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshKeyOptions) ProtoMessage() {}

func (x *SshKeyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshKeyOptions.ProtoReflect.Descriptor instead.
func (*SshKeyOptions) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *SshKeyOptions) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// * Known hosts information.
type KnownHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`                    //* Hostname of the known host.
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                            //* Type of the key.
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              //* Fingerprint of the known host.
	Owner       string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`                          //* Owner of the key.
	UpdatedAt   string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` //* Last update date of the known host information.
}

func (x *KnownHost) Reset() {
	*x = KnownHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnownHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnownHost) ProtoMessage() {}

func (x *KnownHost) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnownHost.ProtoReflect.Descriptor instead.
func (*KnownHost) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *KnownHost) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *KnownHost) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KnownHost) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *KnownHost) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *KnownHost) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// * SSH key access information.
type SshKeyAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              //* Fingerprint of the SSH key.
	AsUser      string `protobuf:"bytes,2,opt,name=as_user,json=asUser,proto3" json:"as_user,omitempty"`          //* User associated with the key.
	UpdatedAt   string `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` //* Last update date of the SSH key access information.
}

func (x *SshKeyAccess) Reset() {
	*x = SshKeyAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshKeyAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshKeyAccess) ProtoMessage() {}

func (x *SshKeyAccess) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshKeyAccess.ProtoReflect.Descriptor instead.
func (*SshKeyAccess) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *SshKeyAccess) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *SshKeyAccess) GetAsUser() string {
	if x != nil {
		return x.AsUser
	}
	return ""
}

func (x *SshKeyAccess) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// *
// Hardware information.
type Hardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *Cpu    `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`       //* CPU information.
	Memory *Memory `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"` //* Memory information.
	Disk   []*Disk `protobuf:"bytes,3,rep,name=disk,proto3" json:"disk,omitempty"`     //* List of disks.
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *Hardware) GetCpu() *Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Hardware) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Hardware) GetDisk() []*Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

// * CPU details.
type Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"` //* CPU model name.
	Core  uint32  `protobuf:"varint,2,opt,name=core,proto3" json:"core,omitempty"`  //* Number of cores.
	Mhz   float32 `protobuf:"fixed32,3,opt,name=mhz,proto3" json:"mhz,omitempty"`   //* CPU speed in MHz.
}

func (x *Cpu) Reset() {
	*x = Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cpu) ProtoMessage() {}

func (x *Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cpu.ProtoReflect.Descriptor instead.
func (*Cpu) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{28}
}

func (x *Cpu) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Cpu) GetCore() uint32 {
	if x != nil {
		return x.Core
	}
	return 0
}

func (x *Cpu) GetMhz() float32 {
	if x != nil {
		return x.Mhz
	}
	return 0
}

// * Memory details.
type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //* Total memory in bytes.
	Used  uint64 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`   //* Used memory in bytes.
	Swap  uint64 `protobuf:"varint,3,opt,name=swap,proto3" json:"swap,omitempty"`   //* Swap memory in bytes.
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{29}
}

func (x *Memory) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Memory) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Memory) GetSwap() uint64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

// * Disk information.
type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`             //* Disk UUID.
	Device     string           `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`         //* Device name.
	Partitions []*DiskPartition `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"` //* List of disk partitions.
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{30}
}

func (x *Disk) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Disk) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Disk) GetPartitions() []*DiskPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// * Disk partition details.
type DiskPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mountpoint  string  `protobuf:"bytes,1,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`                        //* Mount point.
	FsType      string  `protobuf:"bytes,2,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`                  //* File system type.
	Total       uint64  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                 //* Total size in bytes.
	Used        uint64  `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`                                   //* Used size in bytes.
	Free        uint64  `protobuf:"varint,5,opt,name=free,proto3" json:"free,omitempty"`                                   //* Free size in bytes.
	UsedPercent float64 `protobuf:"fixed64,6,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"` //* Used space percentage.
}

func (x *DiskPartition) Reset() {
	*x = DiskPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartition) ProtoMessage() {}

func (x *DiskPartition) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartition.ProtoReflect.Descriptor instead.
func (*DiskPartition) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{31}
}

func (x *DiskPartition) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *DiskPartition) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

func (x *DiskPartition) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskPartition) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskPartition) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *DiskPartition) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docker *Docker `protobuf:"bytes,1,opt,name=docker,proto3" json:"docker,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{32}
}

func (x *Application) GetDocker() *Docker {
	if x != nil {
		return x.Docker
	}
	return nil
}

type Docker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images     []*ContainersImages `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	Containers []*Containers       `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
	Networks   []*DockerNetworks   `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *Docker) Reset() {
	*x = Docker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Docker) ProtoMessage() {}

func (x *Docker) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Docker.ProtoReflect.Descriptor instead.
func (*Docker) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{33}
}

func (x *Docker) GetImages() []*ContainersImages {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Docker) GetContainers() []*Containers {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *Docker) GetNetworks() []*DockerNetworks {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ContainersImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepoTags    []string `protobuf:"bytes,2,rep,name=repo_tags,json=repoTags,proto3" json:"repo_tags,omitempty"`
	Created     int64    `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Size        int64    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	SharedSize  int64    `protobuf:"varint,5,opt,name=shared_size,json=sharedSize,proto3" json:"shared_size,omitempty"`
	ParentId    string   `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RepoDigests []string `protobuf:"bytes,7,rep,name=repo_digests,json=repoDigests,proto3" json:"repo_digests,omitempty"`
	Containers  int64    `protobuf:"varint,8,opt,name=containers,proto3" json:"containers,omitempty"`               //* Number of containers using this image.
	UpdatedAt   string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` //* Last update date of the container images information.
}

func (x *ContainersImages) Reset() {
	*x = ContainersImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainersImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainersImages) ProtoMessage() {}

func (x *ContainersImages) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainersImages.ProtoReflect.Descriptor instead.
func (*ContainersImages) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{34}
}

func (x *ContainersImages) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainersImages) GetRepoTags() []string {
	if x != nil {
		return x.RepoTags
	}
	return nil
}

func (x *ContainersImages) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ContainersImages) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ContainersImages) GetSharedSize() int64 {
	if x != nil {
		return x.SharedSize
	}
	return 0
}

func (x *ContainersImages) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ContainersImages) GetRepoDigests() []string {
	if x != nil {
		return x.RepoDigests
	}
	return nil
}

func (x *ContainersImages) GetContainers() int64 {
	if x != nil {
		return x.Containers
	}
	return 0
}

func (x *ContainersImages) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Containers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image       string               `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Command     string               `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	SizeRootFs  int64                `protobuf:"varint,5,opt,name=size_root_fs,json=sizeRootFs,proto3" json:"size_root_fs,omitempty"`
	Mounts      []*ContainerMounts   `protobuf:"bytes,6,rep,name=mounts,proto3" json:"mounts,omitempty"`
	State       string               `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Status      string               `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Ports       []*ContainerPorts    `protobuf:"bytes,9,rep,name=ports,proto3" json:"ports,omitempty"`
	Networks    []*ContainerNetworks `protobuf:"bytes,10,rep,name=networks,proto3" json:"networks,omitempty"`
	SizeRw      int64                `protobuf:"varint,11,opt,name=size_rw,json=sizeRw,proto3" json:"size_rw,omitempty"`
	Created     int64                `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	ImageId     string               `protobuf:"bytes,13,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`             //* Image ID of the container.
	NetworkMode string               `protobuf:"bytes,14,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty"` //* Network mode of the container.
	UpdatedAt   string               `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`       //* Last update date of the container information.
}

func (x *Containers) Reset() {
	*x = Containers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Containers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Containers) ProtoMessage() {}

func (x *Containers) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Containers.ProtoReflect.Descriptor instead.
func (*Containers) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{35}
}

func (x *Containers) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Containers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Containers) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Containers) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Containers) GetSizeRootFs() int64 {
	if x != nil {
		return x.SizeRootFs
	}
	return 0
}

func (x *Containers) GetMounts() []*ContainerMounts {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *Containers) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Containers) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Containers) GetPorts() []*ContainerPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Containers) GetNetworks() []*ContainerNetworks {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Containers) GetSizeRw() int64 {
	if x != nil {
		return x.SizeRw
	}
	return 0
}

func (x *Containers) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Containers) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Containers) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *Containers) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ContainerMounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Driver      string `protobuf:"bytes,4,opt,name=driver,proto3" json:"driver,omitempty"`
	Mode        string `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Rw          bool   `protobuf:"varint,6,opt,name=rw,proto3" json:"rw,omitempty"`
	Propagation string `protobuf:"bytes,7,opt,name=propagation,proto3" json:"propagation,omitempty"`
	Type        string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ContainerMounts) Reset() {
	*x = ContainerMounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerMounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerMounts) ProtoMessage() {}

func (x *ContainerMounts) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerMounts.ProtoReflect.Descriptor instead.
func (*ContainerMounts) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{36}
}

func (x *ContainerMounts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerMounts) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ContainerMounts) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ContainerMounts) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *ContainerMounts) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ContainerMounts) GetRw() bool {
	if x != nil {
		return x.Rw
	}
	return false
}

func (x *ContainerMounts) GetPropagation() string {
	if x != nil {
		return x.Propagation
	}
	return ""
}

func (x *ContainerMounts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ContainerPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivatePort int32  `protobuf:"varint,1,opt,name=private_port,json=privatePort,proto3" json:"private_port,omitempty"`
	PublicPort  int32  `protobuf:"varint,2,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *ContainerPorts) Reset() {
	*x = ContainerPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPorts) ProtoMessage() {}

func (x *ContainerPorts) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPorts.ProtoReflect.Descriptor instead.
func (*ContainerPorts) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{37}
}

func (x *ContainerPorts) GetPrivatePort() int32 {
	if x != nil {
		return x.PrivatePort
	}
	return 0
}

func (x *ContainerPorts) GetPublicPort() int32 {
	if x != nil {
		return x.PublicPort
	}
	return 0
}

func (x *ContainerPorts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContainerPorts) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ContainerNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress  string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpPrefixLen int64  `protobuf:"varint,2,opt,name=ip_prefix_len,json=ipPrefixLen,proto3" json:"ip_prefix_len,omitempty"`
	IpAddress   string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Gateway     string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	EndpointId  string `protobuf:"bytes,5,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	NetworkId   string `protobuf:"bytes,6,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *ContainerNetworks) Reset() {
	*x = ContainerNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerNetworks) ProtoMessage() {}

func (x *ContainerNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerNetworks.ProtoReflect.Descriptor instead.
func (*ContainerNetworks) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{38}
}

func (x *ContainerNetworks) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ContainerNetworks) GetIpPrefixLen() int64 {
	if x != nil {
		return x.IpPrefixLen
	}
	return 0
}

func (x *ContainerNetworks) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ContainerNetworks) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *ContainerNetworks) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

func (x *ContainerNetworks) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type DockerNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope     string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Driver    string `protobuf:"bytes,4,opt,name=driver,proto3" json:"driver,omitempty"`
	Internal  bool   `protobuf:"varint,5,opt,name=internal,proto3" json:"internal,omitempty"`
	UpdatedAt string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` //* Last update date of the docker networks information.
}

func (x *DockerNetworks) Reset() {
	*x = DockerNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerNetworks) ProtoMessage() {}

func (x *DockerNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerNetworks.ProtoReflect.Descriptor instead.
func (*DockerNetworks) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{39}
}

func (x *DockerNetworks) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DockerNetworks) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerNetworks) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DockerNetworks) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *DockerNetworks) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *DockerNetworks) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Firewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Rules   []*FirewallRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{40}
}

func (x *Firewall) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firewall) GetRules() []*FirewallRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain                string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	MethodNegate         string `protobuf:"bytes,2,opt,name=method_negate,json=methodNegate,proto3" json:"method_negate,omitempty"`
	MethodDeny           string `protobuf:"bytes,3,opt,name=method_deny,json=methodDeny,proto3" json:"method_deny,omitempty"`
	MethodAccept         string `protobuf:"bytes,4,opt,name=method_accept,json=methodAccept,proto3" json:"method_accept,omitempty"`
	ParamCount           string `protobuf:"bytes,5,opt,name=param_count,json=paramCount,proto3" json:"param_count,omitempty"`
	ValueCountInput      string `protobuf:"bytes,6,opt,name=value_count_input,json=valueCountInput,proto3" json:"value_count_input,omitempty"`
	ValueCountOutput     string `protobuf:"bytes,7,opt,name=value_count_output,json=valueCountOutput,proto3" json:"value_count_output,omitempty"`
	ParamChain           string `protobuf:"bytes,8,opt,name=param_chain,json=paramChain,proto3" json:"param_chain,omitempty"`
	ValueChain           string `protobuf:"bytes,9,opt,name=value_chain,json=valueChain,proto3" json:"value_chain,omitempty"`
	ParamSelectInput     string `protobuf:"bytes,10,opt,name=param_select_input,json=paramSelectInput,proto3" json:"param_select_input,omitempty"`
	ValueSelectInput     string `protobuf:"bytes,11,opt,name=value_select_input,json=valueSelectInput,proto3" json:"value_select_input,omitempty"`
	ParamSelectOutput    string `protobuf:"bytes,12,opt,name=param_select_output,json=paramSelectOutput,proto3" json:"param_select_output,omitempty"`
	ValueSelectOutput    string `protobuf:"bytes,13,opt,name=value_select_output,json=valueSelectOutput,proto3" json:"value_select_output,omitempty"`
	ParamJump            string `protobuf:"bytes,14,opt,name=param_jump,json=paramJump,proto3" json:"param_jump,omitempty"`
	ValueJump            string `protobuf:"bytes,15,opt,name=value_jump,json=valueJump,proto3" json:"value_jump,omitempty"`
	ParamMatch           string `protobuf:"bytes,16,opt,name=param_match,json=paramMatch,proto3" json:"param_match,omitempty"`
	ValueMatch           string `protobuf:"bytes,17,opt,name=value_match,json=valueMatch,proto3" json:"value_match,omitempty"`
	ParamProtocol        string `protobuf:"bytes,18,opt,name=param_protocol,json=paramProtocol,proto3" json:"param_protocol,omitempty"`
	ValueProtocol        string `protobuf:"bytes,19,opt,name=value_protocol,json=valueProtocol,proto3" json:"value_protocol,omitempty"`
	ParamSource          string `protobuf:"bytes,20,opt,name=param_source,json=paramSource,proto3" json:"param_source,omitempty"`
	ValueSource          string `protobuf:"bytes,21,opt,name=value_source,json=valueSource,proto3" json:"value_source,omitempty"`
	ParamDestination     string `protobuf:"bytes,22,opt,name=param_destination,json=paramDestination,proto3" json:"param_destination,omitempty"`
	ValueDestination     string `protobuf:"bytes,23,opt,name=value_destination,json=valueDestination,proto3" json:"value_destination,omitempty"`
	ParamDestinationPort string `protobuf:"bytes,24,opt,name=param_destination_port,json=paramDestinationPort,proto3" json:"param_destination_port,omitempty"`
	ValueDestinationPort string `protobuf:"bytes,25,opt,name=value_destination_port,json=valueDestinationPort,proto3" json:"value_destination_port,omitempty"`
	ParamDestinationType string `protobuf:"bytes,26,opt,name=param_destination_type,json=paramDestinationType,proto3" json:"param_destination_type,omitempty"`
	ValueDestinationType string `protobuf:"bytes,27,opt,name=value_destination_type,json=valueDestinationType,proto3" json:"value_destination_type,omitempty"`
	ParamCstate          string `protobuf:"bytes,28,opt,name=param_cstate,json=paramCstate,proto3" json:"param_cstate,omitempty"`
	ValueCstate          string `protobuf:"bytes,29,opt,name=value_cstate,json=valueCstate,proto3" json:"value_cstate,omitempty"`
	ParamSourcePort      string `protobuf:"bytes,30,opt,name=param_source_port,json=paramSourcePort,proto3" json:"param_source_port,omitempty"`
	ValueSourcePort      string `protobuf:"bytes,31,opt,name=value_source_port,json=valueSourcePort,proto3" json:"value_source_port,omitempty"`
	ParamLimit           string `protobuf:"bytes,32,opt,name=param_limit,json=paramLimit,proto3" json:"param_limit,omitempty"`
	ValueLimit           string `protobuf:"bytes,33,opt,name=value_limit,json=valueLimit,proto3" json:"value_limit,omitempty"`
	ParamLimitBurst      string `protobuf:"bytes,34,opt,name=param_limit_burst,json=paramLimitBurst,proto3" json:"param_limit_burst,omitempty"`
	ValueLimitBurst      string `protobuf:"bytes,35,opt,name=value_limit_burst,json=valueLimitBurst,proto3" json:"value_limit_burst,omitempty"`
	ParamIcmpType        string `protobuf:"bytes,36,opt,name=param_icmp_type,json=paramIcmpType,proto3" json:"param_icmp_type,omitempty"`
	ValueIcmpType        string `protobuf:"bytes,37,opt,name=value_icmp_type,json=valueIcmpType,proto3" json:"value_icmp_type,omitempty"`
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{41}
}

func (x *FirewallRule) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *FirewallRule) GetMethodNegate() string {
	if x != nil {
		return x.MethodNegate
	}
	return ""
}

func (x *FirewallRule) GetMethodDeny() string {
	if x != nil {
		return x.MethodDeny
	}
	return ""
}

func (x *FirewallRule) GetMethodAccept() string {
	if x != nil {
		return x.MethodAccept
	}
	return ""
}

func (x *FirewallRule) GetParamCount() string {
	if x != nil {
		return x.ParamCount
	}
	return ""
}

func (x *FirewallRule) GetValueCountInput() string {
	if x != nil {
		return x.ValueCountInput
	}
	return ""
}

func (x *FirewallRule) GetValueCountOutput() string {
	if x != nil {
		return x.ValueCountOutput
	}
	return ""
}

func (x *FirewallRule) GetParamChain() string {
	if x != nil {
		return x.ParamChain
	}
	return ""
}

func (x *FirewallRule) GetValueChain() string {
	if x != nil {
		return x.ValueChain
	}
	return ""
}

func (x *FirewallRule) GetParamSelectInput() string {
	if x != nil {
		return x.ParamSelectInput
	}
	return ""
}

func (x *FirewallRule) GetValueSelectInput() string {
	if x != nil {
		return x.ValueSelectInput
	}
	return ""
}

func (x *FirewallRule) GetParamSelectOutput() string {
	if x != nil {
		return x.ParamSelectOutput
	}
	return ""
}

func (x *FirewallRule) GetValueSelectOutput() string {
	if x != nil {
		return x.ValueSelectOutput
	}
	return ""
}

func (x *FirewallRule) GetParamJump() string {
	if x != nil {
		return x.ParamJump
	}
	return ""
}

func (x *FirewallRule) GetValueJump() string {
	if x != nil {
		return x.ValueJump
	}
	return ""
}

func (x *FirewallRule) GetParamMatch() string {
	if x != nil {
		return x.ParamMatch
	}
	return ""
}

func (x *FirewallRule) GetValueMatch() string {
	if x != nil {
		return x.ValueMatch
	}
	return ""
}

func (x *FirewallRule) GetParamProtocol() string {
	if x != nil {
		return x.ParamProtocol
	}
	return ""
}

func (x *FirewallRule) GetValueProtocol() string {
	if x != nil {
		return x.ValueProtocol
	}
	return ""
}

func (x *FirewallRule) GetParamSource() string {
	if x != nil {
		return x.ParamSource
	}
	return ""
}

func (x *FirewallRule) GetValueSource() string {
	if x != nil {
		return x.ValueSource
	}
	return ""
}

func (x *FirewallRule) GetParamDestination() string {
	if x != nil {
		return x.ParamDestination
	}
	return ""
}

func (x *FirewallRule) GetValueDestination() string {
	if x != nil {
		return x.ValueDestination
	}
	return ""
}

func (x *FirewallRule) GetParamDestinationPort() string {
	if x != nil {
		return x.ParamDestinationPort
	}
	return ""
}

func (x *FirewallRule) GetValueDestinationPort() string {
	if x != nil {
		return x.ValueDestinationPort
	}
	return ""
}

func (x *FirewallRule) GetParamDestinationType() string {
	if x != nil {
		return x.ParamDestinationType
	}
	return ""
}

func (x *FirewallRule) GetValueDestinationType() string {
	if x != nil {
		return x.ValueDestinationType
	}
	return ""
}

func (x *FirewallRule) GetParamCstate() string {
	if x != nil {
		return x.ParamCstate
	}
	return ""
}

func (x *FirewallRule) GetValueCstate() string {
	if x != nil {
		return x.ValueCstate
	}
	return ""
}

func (x *FirewallRule) GetParamSourcePort() string {
	if x != nil {
		return x.ParamSourcePort
	}
	return ""
}

func (x *FirewallRule) GetValueSourcePort() string {
	if x != nil {
		return x.ValueSourcePort
	}
	return ""
}

func (x *FirewallRule) GetParamLimit() string {
	if x != nil {
		return x.ParamLimit
	}
	return ""
}

func (x *FirewallRule) GetValueLimit() string {
	if x != nil {
		return x.ValueLimit
	}
	return ""
}

func (x *FirewallRule) GetParamLimitBurst() string {
	if x != nil {
		return x.ParamLimitBurst
	}
	return ""
}

func (x *FirewallRule) GetValueLimitBurst() string {
	if x != nil {
		return x.ValueLimitBurst
	}
	return ""
}

func (x *FirewallRule) GetParamIcmpType() string {
	if x != nil {
		return x.ParamIcmpType
	}
	return ""
}

func (x *FirewallRule) GetValueIcmpType() string {
	if x != nil {
		return x.ValueIcmpType
	}
	return ""
}

// * Response message for gRPC services.
type InventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` //* Response message text.
}

func (x *InventoryResponse) Reset() {
	*x = InventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryResponse) ProtoMessage() {}

func (x *InventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_klamhq_rpc_facter_v1_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryResponse.ProtoReflect.Descriptor instead.
func (*InventoryResponse) Descriptor() ([]byte, []int) {
	return file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP(), []int{42}
}

func (x *InventoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_klamhq_rpc_facter_v1_service_proto protoreflect.FileDescriptor

var file_klamhq_rpc_facter_v1_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xc9, 0x06, 0x0a, 0x0d, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x0b, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x59, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6c,
	0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x11, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x73, 0x68, 0x6b,
	0x65, 0x79, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x13, 0x73, 0x73, 0x68, 0x6b,
	0x65, 0x79, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b,
	0x0a, 0x10, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68,
	0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x6b,
	0x65, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x12, 0x73,
	0x73, 0x68, 0x6b, 0x65, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x73, 0x68, 0x6b, 0x65,
	0x79, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68,
	0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x03, 0x0a,
	0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x73, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x34, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x73, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x22, 0x4a, 0x0a, 0x02, 0x4f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x22, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x42, 0x65,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x71, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xe9, 0x03, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x3a, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x08,
	0x64, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x65, 0x6f,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x02, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0x3a,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x09, 0x47, 0x65,
	0x6f, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0x70, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6c,
	0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22,
	0x31, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x66, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x22, 0x84, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x06, 0x49, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xcf, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xc2, 0x02, 0x0a, 0x0a, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x68, 0x0a, 0x0c, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6c, 0x61,
	0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b,
	0x22, 0x41, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6d, 0x68, 0x7a, 0x22, 0x46, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x22, 0x77, 0x0a, 0x04, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0x43, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x6c, 0x61, 0x6d,
	0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x72, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x77,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x72, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xd6, 0x0b, 0x0a, 0x0c, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x64, 0x65, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4a,
	0x75, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6a, 0x75, 0x6d,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x50, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x30, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x34, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x36, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x55, 0x44, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x43,
	0x50, 0x10, 0x01, 0x32, 0x6f, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x74, 0x47, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x6c,
	0x61, 0x6d, 0x68, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x6c, 0x61, 0x6d, 0x68, 0x71, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_klamhq_rpc_facter_v1_service_proto_rawDescOnce sync.Once
	file_klamhq_rpc_facter_v1_service_proto_rawDescData = file_klamhq_rpc_facter_v1_service_proto_rawDesc
)

func file_klamhq_rpc_facter_v1_service_proto_rawDescGZIP() []byte {
	file_klamhq_rpc_facter_v1_service_proto_rawDescOnce.Do(func() {
		file_klamhq_rpc_facter_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_klamhq_rpc_facter_v1_service_proto_rawDescData)
	})
	return file_klamhq_rpc_facter_v1_service_proto_rawDescData
}

var file_klamhq_rpc_facter_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_klamhq_rpc_facter_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_klamhq_rpc_facter_v1_service_proto_goTypes = []interface{}{
	(IPVersion)(0),             // 0: klamhq.rpc.facter.v1.IPVersion
	(State)(0),                 // 1: klamhq.rpc.facter.v1.State
	(Protocol)(0),              // 2: klamhq.rpc.facter.v1.Protocol
	(*HostInventory)(nil),      // 3: klamhq.rpc.facter.v1.HostInventory
	(*HostDeltaInventory)(nil), // 4: klamhq.rpc.facter.v1.HostDeltaInventory
	(*InventoryRequest)(nil),   // 5: klamhq.rpc.facter.v1.InventoryRequest
	(*Identifier)(nil),         // 6: klamhq.rpc.facter.v1.Identifier
	(*Metadata)(nil),           // 7: klamhq.rpc.facter.v1.Metadata
	(*SystemdService)(nil),     // 8: klamhq.rpc.facter.v1.SystemdService
	(*Platform)(nil),           // 9: klamhq.rpc.facter.v1.Platform
	(*Kernel)(nil),             // 10: klamhq.rpc.facter.v1.Kernel
	(*Os)(nil),                 // 11: klamhq.rpc.facter.v1.Os
	(*Virtualization)(nil),     // 12: klamhq.rpc.facter.v1.Virtualization
	(*User)(nil),               // 13: klamhq.rpc.facter.v1.User
	(*Session)(nil),            // 14: klamhq.rpc.facter.v1.Session
	(*Network)(nil),            // 15: klamhq.rpc.facter.v1.Network
	(*Ip)(nil),                 // 16: klamhq.rpc.facter.v1.Ip
	(*ExternalIp)(nil),         // 17: klamhq.rpc.facter.v1.ExternalIp
	(*GeoIpInfo)(nil),          // 18: klamhq.rpc.facter.v1.GeoIpInfo
	(*Interface)(nil),          // 19: klamhq.rpc.facter.v1.Interface
	(*Proxy)(nil),              // 20: klamhq.rpc.facter.v1.Proxy
	(*DnsInfo)(nil),            // 21: klamhq.rpc.facter.v1.DnsInfo
	(*ConnectionState)(nil),    // 22: klamhq.rpc.facter.v1.ConnectionState
	(*Process)(nil),            // 23: klamhq.rpc.facter.v1.Process
	(*IpPort)(nil),             // 24: klamhq.rpc.facter.v1.IpPort
	(*Package)(nil),            // 25: klamhq.rpc.facter.v1.Package
	(*SshKeyInfo)(nil),         // 26: klamhq.rpc.facter.v1.SshKeyInfo
	(*SshKeyOptions)(nil),      // 27: klamhq.rpc.facter.v1.SshKeyOptions
	(*KnownHost)(nil),          // 28: klamhq.rpc.facter.v1.KnownHost
	(*SshKeyAccess)(nil),       // 29: klamhq.rpc.facter.v1.SshKeyAccess
	(*Hardware)(nil),           // 30: klamhq.rpc.facter.v1.Hardware
	(*Cpu)(nil),                // 31: klamhq.rpc.facter.v1.Cpu
	(*Memory)(nil),             // 32: klamhq.rpc.facter.v1.Memory
	(*Disk)(nil),               // 33: klamhq.rpc.facter.v1.Disk
	(*DiskPartition)(nil),      // 34: klamhq.rpc.facter.v1.DiskPartition
	(*Application)(nil),        // 35: klamhq.rpc.facter.v1.Application
	(*Docker)(nil),             // 36: klamhq.rpc.facter.v1.Docker
	(*ContainersImages)(nil),   // 37: klamhq.rpc.facter.v1.ContainersImages
	(*Containers)(nil),         // 38: klamhq.rpc.facter.v1.Containers
	(*ContainerMounts)(nil),    // 39: klamhq.rpc.facter.v1.ContainerMounts
	(*ContainerPorts)(nil),     // 40: klamhq.rpc.facter.v1.ContainerPorts
	(*ContainerNetworks)(nil),  // 41: klamhq.rpc.facter.v1.ContainerNetworks
	(*DockerNetworks)(nil),     // 42: klamhq.rpc.facter.v1.DockerNetworks
	(*Firewall)(nil),           // 43: klamhq.rpc.facter.v1.Firewall
	(*FirewallRule)(nil),       // 44: klamhq.rpc.facter.v1.FirewallRule
	(*InventoryResponse)(nil),  // 45: klamhq.rpc.facter.v1.InventoryResponse
}
var file_klamhq_rpc_facter_v1_service_proto_depIdxs = []int32{
	25, // 0: klamhq.rpc.facter.v1.HostInventory.packages:type_name -> klamhq.rpc.facter.v1.Package
	15, // 1: klamhq.rpc.facter.v1.HostInventory.network:type_name -> klamhq.rpc.facter.v1.Network
	9,  // 2: klamhq.rpc.facter.v1.HostInventory.platform:type_name -> klamhq.rpc.facter.v1.Platform
	13, // 3: klamhq.rpc.facter.v1.HostInventory.users:type_name -> klamhq.rpc.facter.v1.User
	7,  // 4: klamhq.rpc.facter.v1.HostInventory.metadata:type_name -> klamhq.rpc.facter.v1.Metadata
	6,  // 5: klamhq.rpc.facter.v1.HostInventory.identifier:type_name -> klamhq.rpc.facter.v1.Identifier
	26, // 6: klamhq.rpc.facter.v1.HostInventory.ssh_key_info:type_name -> klamhq.rpc.facter.v1.SshKeyInfo
	35, // 7: klamhq.rpc.facter.v1.HostInventory.application:type_name -> klamhq.rpc.facter.v1.Application
	29, // 8: klamhq.rpc.facter.v1.HostInventory.ssh_key_access:type_name -> klamhq.rpc.facter.v1.SshKeyAccess
	8,  // 9: klamhq.rpc.facter.v1.HostInventory.systemd_service:type_name -> klamhq.rpc.facter.v1.SystemdService
	28, // 10: klamhq.rpc.facter.v1.HostInventory.known_host:type_name -> klamhq.rpc.facter.v1.KnownHost
	23, // 11: klamhq.rpc.facter.v1.HostInventory.processes:type_name -> klamhq.rpc.facter.v1.Process
	25, // 12: klamhq.rpc.facter.v1.HostDeltaInventory.packages_added:type_name -> klamhq.rpc.facter.v1.Package
	25, // 13: klamhq.rpc.facter.v1.HostDeltaInventory.packages_removed:type_name -> klamhq.rpc.facter.v1.Package
	13, // 14: klamhq.rpc.facter.v1.HostDeltaInventory.users_added:type_name -> klamhq.rpc.facter.v1.User
	13, // 15: klamhq.rpc.facter.v1.HostDeltaInventory.users_removed:type_name -> klamhq.rpc.facter.v1.User
	35, // 16: klamhq.rpc.facter.v1.HostDeltaInventory.applications_added:type_name -> klamhq.rpc.facter.v1.Application
	35, // 17: klamhq.rpc.facter.v1.HostDeltaInventory.applications_removed:type_name -> klamhq.rpc.facter.v1.Application
	8,  // 18: klamhq.rpc.facter.v1.HostDeltaInventory.systemdservices_added:type_name -> klamhq.rpc.facter.v1.SystemdService
	8,  // 19: klamhq.rpc.facter.v1.HostDeltaInventory.systemdservices_removed:type_name -> klamhq.rpc.facter.v1.SystemdService
	28, // 20: klamhq.rpc.facter.v1.HostDeltaInventory.knownhosts_added:type_name -> klamhq.rpc.facter.v1.KnownHost
	28, // 21: klamhq.rpc.facter.v1.HostDeltaInventory.knownhosts_removed:type_name -> klamhq.rpc.facter.v1.KnownHost
	29, // 22: klamhq.rpc.facter.v1.HostDeltaInventory.sshkeyaccess_added:type_name -> klamhq.rpc.facter.v1.SshKeyAccess
	29, // 23: klamhq.rpc.facter.v1.HostDeltaInventory.sshkeyaccess_removed:type_name -> klamhq.rpc.facter.v1.SshKeyAccess
	26, // 24: klamhq.rpc.facter.v1.HostDeltaInventory.sshkeyinfo_added:type_name -> klamhq.rpc.facter.v1.SshKeyInfo
	26, // 25: klamhq.rpc.facter.v1.HostDeltaInventory.sshkeyinfo_removed:type_name -> klamhq.rpc.facter.v1.SshKeyInfo
	9,  // 26: klamhq.rpc.facter.v1.HostDeltaInventory.platform:type_name -> klamhq.rpc.facter.v1.Platform
	15, // 27: klamhq.rpc.facter.v1.HostDeltaInventory.network:type_name -> klamhq.rpc.facter.v1.Network
	23, // 28: klamhq.rpc.facter.v1.HostDeltaInventory.processes_added:type_name -> klamhq.rpc.facter.v1.Process
	23, // 29: klamhq.rpc.facter.v1.HostDeltaInventory.processes_removed:type_name -> klamhq.rpc.facter.v1.Process
	3,  // 30: klamhq.rpc.facter.v1.InventoryRequest.full:type_name -> klamhq.rpc.facter.v1.HostInventory
	4,  // 31: klamhq.rpc.facter.v1.InventoryRequest.delta:type_name -> klamhq.rpc.facter.v1.HostDeltaInventory
	10, // 32: klamhq.rpc.facter.v1.Platform.kernel:type_name -> klamhq.rpc.facter.v1.Kernel
	11, // 33: klamhq.rpc.facter.v1.Platform.os:type_name -> klamhq.rpc.facter.v1.Os
	12, // 34: klamhq.rpc.facter.v1.Platform.virtualization:type_name -> klamhq.rpc.facter.v1.Virtualization
	30, // 35: klamhq.rpc.facter.v1.Platform.hardware:type_name -> klamhq.rpc.facter.v1.Hardware
	6,  // 36: klamhq.rpc.facter.v1.Platform.identifier:type_name -> klamhq.rpc.facter.v1.Identifier
	14, // 37: klamhq.rpc.facter.v1.User.sessions:type_name -> klamhq.rpc.facter.v1.Session
	19, // 38: klamhq.rpc.facter.v1.Network.interfaces:type_name -> klamhq.rpc.facter.v1.Interface
	16, // 39: klamhq.rpc.facter.v1.Network.ip:type_name -> klamhq.rpc.facter.v1.Ip
	17, // 40: klamhq.rpc.facter.v1.Network.external_ip:type_name -> klamhq.rpc.facter.v1.ExternalIp
	22, // 41: klamhq.rpc.facter.v1.Network.connections:type_name -> klamhq.rpc.facter.v1.ConnectionState
	20, // 42: klamhq.rpc.facter.v1.Network.proxy:type_name -> klamhq.rpc.facter.v1.Proxy
	43, // 43: klamhq.rpc.facter.v1.Network.firewall:type_name -> klamhq.rpc.facter.v1.Firewall
	21, // 44: klamhq.rpc.facter.v1.Network.dns_info:type_name -> klamhq.rpc.facter.v1.DnsInfo
	18, // 45: klamhq.rpc.facter.v1.Network.geoip_info:type_name -> klamhq.rpc.facter.v1.GeoIpInfo
	16, // 46: klamhq.rpc.facter.v1.Interface.ips:type_name -> klamhq.rpc.facter.v1.Ip
	16, // 47: klamhq.rpc.facter.v1.Proxy.ip:type_name -> klamhq.rpc.facter.v1.Ip
	2,  // 48: klamhq.rpc.facter.v1.ConnectionState.protocol:type_name -> klamhq.rpc.facter.v1.Protocol
	1,  // 49: klamhq.rpc.facter.v1.ConnectionState.state:type_name -> klamhq.rpc.facter.v1.State
	23, // 50: klamhq.rpc.facter.v1.ConnectionState.process:type_name -> klamhq.rpc.facter.v1.Process
	24, // 51: klamhq.rpc.facter.v1.ConnectionState.local:type_name -> klamhq.rpc.facter.v1.IpPort
	24, // 52: klamhq.rpc.facter.v1.ConnectionState.remote:type_name -> klamhq.rpc.facter.v1.IpPort
	25, // 53: klamhq.rpc.facter.v1.Process.package:type_name -> klamhq.rpc.facter.v1.Package
	16, // 54: klamhq.rpc.facter.v1.IpPort.ip:type_name -> klamhq.rpc.facter.v1.Ip
	27, // 55: klamhq.rpc.facter.v1.SshKeyInfo.options:type_name -> klamhq.rpc.facter.v1.SshKeyOptions
	31, // 56: klamhq.rpc.facter.v1.Hardware.cpu:type_name -> klamhq.rpc.facter.v1.Cpu
	32, // 57: klamhq.rpc.facter.v1.Hardware.memory:type_name -> klamhq.rpc.facter.v1.Memory
	33, // 58: klamhq.rpc.facter.v1.Hardware.disk:type_name -> klamhq.rpc.facter.v1.Disk
	34, // 59: klamhq.rpc.facter.v1.Disk.partitions:type_name -> klamhq.rpc.facter.v1.DiskPartition
	36, // 60: klamhq.rpc.facter.v1.Application.docker:type_name -> klamhq.rpc.facter.v1.Docker
	37, // 61: klamhq.rpc.facter.v1.Docker.images:type_name -> klamhq.rpc.facter.v1.ContainersImages
	38, // 62: klamhq.rpc.facter.v1.Docker.containers:type_name -> klamhq.rpc.facter.v1.Containers
	42, // 63: klamhq.rpc.facter.v1.Docker.networks:type_name -> klamhq.rpc.facter.v1.DockerNetworks
	39, // 64: klamhq.rpc.facter.v1.Containers.mounts:type_name -> klamhq.rpc.facter.v1.ContainerMounts
	40, // 65: klamhq.rpc.facter.v1.Containers.ports:type_name -> klamhq.rpc.facter.v1.ContainerPorts
	41, // 66: klamhq.rpc.facter.v1.Containers.networks:type_name -> klamhq.rpc.facter.v1.ContainerNetworks
	44, // 67: klamhq.rpc.facter.v1.Firewall.rules:type_name -> klamhq.rpc.facter.v1.FirewallRule
	5,  // 68: klamhq.rpc.facter.v1.FactGrpcService.Inventory:input_type -> klamhq.rpc.facter.v1.InventoryRequest
	45, // 69: klamhq.rpc.facter.v1.FactGrpcService.Inventory:output_type -> klamhq.rpc.facter.v1.InventoryResponse
	69, // [69:70] is the sub-list for method output_type
	68, // [68:69] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_klamhq_rpc_facter_v1_service_proto_init() }
func file_klamhq_rpc_facter_v1_service_proto_init() {
	if File_klamhq_rpc_facter_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDeltaInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemdService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Os); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Virtualization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshKeyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnownHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshKeyAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Docker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainersImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Containers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerMounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firewall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_klamhq_rpc_facter_v1_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_klamhq_rpc_facter_v1_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*InventoryRequest_Full)(nil),
		(*InventoryRequest_Delta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_klamhq_rpc_facter_v1_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_klamhq_rpc_facter_v1_service_proto_goTypes,
		DependencyIndexes: file_klamhq_rpc_facter_v1_service_proto_depIdxs,
		EnumInfos:         file_klamhq_rpc_facter_v1_service_proto_enumTypes,
		MessageInfos:      file_klamhq_rpc_facter_v1_service_proto_msgTypes,
	}.Build()
	File_klamhq_rpc_facter_v1_service_proto = out.File
	file_klamhq_rpc_facter_v1_service_proto_rawDesc = nil
	file_klamhq_rpc_facter_v1_service_proto_goTypes = nil
	file_klamhq_rpc_facter_v1_service_proto_depIdxs = nil
}
