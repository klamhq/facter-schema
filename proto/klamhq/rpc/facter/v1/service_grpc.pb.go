// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: klamhq/rpc/facter/v1/service.proto

package facterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactGrpcServiceClient is the client API for FactGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactGrpcServiceClient interface {
	// * Sends the Inventory message and receives a Response.
	Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error)
}

type factGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFactGrpcServiceClient(cc grpc.ClientConnInterface) FactGrpcServiceClient {
	return &factGrpcServiceClient{cc}
}

func (c *factGrpcServiceClient) Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error) {
	out := new(InventoryResponse)
	err := c.cc.Invoke(ctx, "/klamhq.rpc.facter.v1.FactGrpcService/Inventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactGrpcServiceServer is the server API for FactGrpcService service.
// All implementations must embed UnimplementedFactGrpcServiceServer
// for forward compatibility
type FactGrpcServiceServer interface {
	// * Sends the Inventory message and receives a Response.
	Inventory(context.Context, *InventoryRequest) (*InventoryResponse, error)
	mustEmbedUnimplementedFactGrpcServiceServer()
}

// UnimplementedFactGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFactGrpcServiceServer struct {
}

func (UnimplementedFactGrpcServiceServer) Inventory(context.Context, *InventoryRequest) (*InventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inventory not implemented")
}
func (UnimplementedFactGrpcServiceServer) mustEmbedUnimplementedFactGrpcServiceServer() {}

// UnsafeFactGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactGrpcServiceServer will
// result in compilation errors.
type UnsafeFactGrpcServiceServer interface {
	mustEmbedUnimplementedFactGrpcServiceServer()
}

func RegisterFactGrpcServiceServer(s grpc.ServiceRegistrar, srv FactGrpcServiceServer) {
	s.RegisterService(&FactGrpcService_ServiceDesc, srv)
}

func _FactGrpcService_Inventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactGrpcServiceServer).Inventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klamhq.rpc.facter.v1.FactGrpcService/Inventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactGrpcServiceServer).Inventory(ctx, req.(*InventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FactGrpcService_ServiceDesc is the grpc.ServiceDesc for FactGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FactGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "klamhq.rpc.facter.v1.FactGrpcService",
	HandlerType: (*FactGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inventory",
			Handler:    _FactGrpcService_Inventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "klamhq/rpc/facter/v1/service.proto",
}
